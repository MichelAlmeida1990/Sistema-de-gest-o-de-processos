#!/bin/bash

# ===========================================
# SCRIPT DE DEPLOY COMPLETO
# ===========================================

echo "üöÄ Deploy Completo do Sistema de Gest√£o de Processos"
echo "======================================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Verificar se est√° na raiz do projeto
if [ ! -f "package.json" ] && [ ! -d "frontend" ]; then
    log_error "Execute este script na raiz do projeto"
    exit 1
fi

# Fase 1: Prepara√ß√£o
log_info "Fase 1: Prepara√ß√£o do projeto"
echo "--------------------------------"

# Verificar Git
if [ ! -d ".git" ]; then
    log_warning "Reposit√≥rio Git n√£o encontrado. Inicializando..."
    git init
    git add .
    git commit -m "feat: sistema pronto para deploy"
    log_success "Reposit√≥rio Git inicializado"
fi

# Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    log_warning "H√° mudan√ßas n√£o commitadas. Fazendo commit..."
    git add .
    git commit -m "feat: preparar para deploy"
    log_success "Mudan√ßas commitadas"
fi

# Fase 2: Build do Frontend
log_info "Fase 2: Build do frontend"
echo "----------------------------"

cd frontend

# Verificar depend√™ncias
if [ ! -d "node_modules" ]; then
    log_info "Instalando depend√™ncias do frontend..."
    npm install
fi

# Fazer build
log_info "Fazendo build para produ√ß√£o..."
npm run build

if [ $? -ne 0 ]; then
    log_error "Build do frontend falhou!"
    exit 1
fi

log_success "Build do frontend conclu√≠do!"

# Fase 3: Verifica√ß√µes de Seguran√ßa
log_info "Fase 3: Verifica√ß√µes de seguran√ßa"
echo "------------------------------------"

cd ..

# Verificar se chaves foram geradas
if [ ! -f ".env.production.keys" ]; then
    log_warning "Chaves de produ√ß√£o n√£o encontradas. Gerando..."
    cd scripts
    python generate-keys.py
    cd ..
    log_success "Chaves de produ√ß√£o geradas"
fi

# Verificar .gitignore
if ! grep -q ".env.production.keys" .gitignore; then
    echo ".env.production.keys" >> .gitignore
    log_success "Arquivo de chaves adicionado ao .gitignore"
fi

# Fase 4: Instru√ß√µes de Deploy
log_info "Fase 4: Instru√ß√µes de deploy"
echo "------------------------------"

echo ""
log_success "‚úÖ Projeto preparado para deploy!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo ""
echo "üî∏ FRONTEND (Vercel):"
echo "   1. Acesse: https://vercel.com"
echo "   2. New Project ‚Üí Import Git Repository"
echo "   3. Selecione seu reposit√≥rio"
echo "   4. Configure:"
echo "      - Framework: Vite"
echo "      - Root Directory: frontend"
echo "      - Build Command: npm run build"
echo "      - Output Directory: dist"
echo ""
echo "üî∏ BACKEND (Railway):"
echo "   1. Acesse: https://railway.app"
echo "   2. New Project ‚Üí Deploy from GitHub"
echo "   3. Selecione seu reposit√≥rio"
echo "   4. Configure Root Directory: backend"
echo "   5. Adicione PostgreSQL e Redis"
echo ""
echo "üî∏ VARI√ÅVEIS DE AMBIENTE:"
echo "   üìÑ Chaves geradas em: .env.production.keys"
echo "   üìã Use essas chaves nas configura√ß√µes do Railway/Vercel"
echo ""
echo "üî∏ CONFIGURA√á√ÉO FINAL:"
echo "   1. Copie URL do backend do Railway"
echo "   2. Configure VITE_API_URL na Vercel"
echo "   3. Configure FRONTEND_URL no Railway"
echo "   4. Configure ALLOWED_HOSTS no Railway"
echo ""

# Mostrar URLs importantes
echo "üîó LINKS √öTEIS:"
echo "   üìñ Guia detalhado: DEPLOY_VERCEL.md"
echo "   üìñ Documenta√ß√£o: README.md"
echo "   üîß Configura√ß√µes: env.example"
echo ""

log_success "üéâ Sistema pronto para deploy em produ√ß√£o!"

# Fase 5: Opcional - Auto deploy se CLI estiver instalado
echo ""
read -p "ü§ñ Quer fazer deploy autom√°tico agora? (y/N): " auto_deploy

if [[ $auto_deploy =~ ^[Yy]$ ]]; then
    log_info "Iniciando deploy autom√°tico..."
    
    # Verificar Vercel CLI
    if command -v vercel &> /dev/null; then
        log_info "Fazendo deploy na Vercel..."
        cd frontend
        vercel --prod
        cd ..
        log_success "Frontend deployado na Vercel!"
    else
        log_warning "Vercel CLI n√£o encontrado. Instale com: npm install -g vercel"
    fi
    
    log_info "Para o backend, acesse: https://railway.app"
fi

echo ""
log_success "üèÅ Script de deploy conclu√≠do!"
