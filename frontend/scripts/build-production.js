#!/usr/bin/env node

// ===========================================
// SCRIPT DE BUILD PARA PRODU√á√ÉO
// ===========================================

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

console.log('üèóÔ∏è Preparando build para produ√ß√£o...')

// Verificar se est√° no diret√≥rio correto
if (!fs.existsSync('package.json')) {
  console.error('‚ùå Execute este script no diret√≥rio frontend/')
  process.exit(1)
}

try {
  // Limpar build anterior
  console.log('üßπ Limpando build anterior...')
  if (fs.existsSync('dist')) {
    execSync('rm -rf dist', { stdio: 'inherit' })
  }

  // Verificar depend√™ncias
  console.log('üì¶ Verificando depend√™ncias...')
  execSync('npm ci', { stdio: 'inherit' })

  // Type check
  console.log('üîç Verificando tipos TypeScript...')
  execSync('npm run type-check', { stdio: 'inherit' })

  // Lint
  console.log('‚ú® Verificando c√≥digo com ESLint...')
  try {
    execSync('npm run lint', { stdio: 'inherit' })
  } catch (error) {
    console.warn('‚ö†Ô∏è Avisos de lint encontrados, mas continuando...')
  }

  // Build
  console.log('üöÄ Fazendo build para produ√ß√£o...')
  execSync('npm run build', { stdio: 'inherit' })

  // Verificar se build foi criado
  if (!fs.existsSync('dist/index.html')) {
    throw new Error('Build n√£o foi criado corretamente')
  }

  // Estat√≠sticas do build
  console.log('\nüìä Estat√≠sticas do build:')
  const distStats = execSync('du -sh dist/', { encoding: 'utf8' }).trim()
  console.log(`   Tamanho total: ${distStats.split('\t')[0]}`)

  // Listar arquivos principais
  const files = fs.readdirSync('dist')
  console.log('   Arquivos principais:')
  files.forEach(file => {
    if (file.endsWith('.js') || file.endsWith('.css') || file.endsWith('.html')) {
      const filePath = path.join('dist', file)
      const stats = fs.statSync(filePath)
      const sizeKB = Math.round(stats.size / 1024)
      console.log(`   - ${file}: ${sizeKB}KB`)
    }
  })

  console.log('\n‚úÖ Build para produ√ß√£o conclu√≠do com sucesso!')
  console.log('\nüìã Pr√≥ximos passos:')
  console.log('1. Fazer deploy na Vercel: vercel --prod')
  console.log('2. Configurar vari√°veis de ambiente na Vercel')
  console.log('3. Configurar dom√≠nio personalizado (opcional)')

} catch (error) {
  console.error('\n‚ùå Erro no build:', error.message)
  process.exit(1)
}
